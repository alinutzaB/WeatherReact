{"version":3,"sources":["DayCard.js","DegreeToggle.js","WeekContainer.js","App.js","serviceWorker.js","index.js","apiKeys.js"],"names":["moment","require","DayCard","reading","degreeType","newDate","Date","weekday","dt","setTime","fahrenheit","Math","round","main","temp","celsius","imgURL","weather","id","className","format","description","DegreeToggle","updateForecastDegree","Fragment","type","name","value","defaultChecked","onChange","htmlFor","WeekContainer","state","fullData","dailyData","event","setState","target","console","log","componentDidMount","weatherURL","apiConfig","weatherKey","fetch","then","response","json","data","list","filter","dt_txt","includes","formatDayCards","map","index","key","formatDegreeToggle","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"yPAEIA,G,MAASC,EAAQ,KA2BNC,EAzBC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WACvBC,EAAU,IAAIC,KACZC,EAAuB,IAAbJ,EAAQK,GACxBH,EAAQI,QAAQF,GAEhB,IAAMG,EAAaC,KAAKC,MAAMT,EAAQU,KAAKC,MACrCC,EAAUJ,KAAKC,MAA0B,GAAnBF,EAAa,IAAQ,GAE3CM,EAAM,kBAAcb,EAAQc,QAAQ,GAAGC,GAAjC,WAEZ,OACC,yBAAKC,UAAU,YACd,yBAAKA,UAAU,QACd,wBAAIA,UAAU,cAAcnB,EAAOK,GAASe,OAAO,SACnD,uBAAGD,UAAU,cAAcnB,EAAOK,GAASe,OAAO,oBAClD,uBAAGD,UAAWH,IACd,4BAAoB,YAAfZ,EAA2BW,EAAU,QAAOL,EAAa,SAC9D,yBAAKS,UAAU,aACd,uBAAGA,UAAU,aAAahB,EAAQc,QAAQ,GAAGI,iBCLnCC,EAfO,SAAC,GAAwC,IAAvClB,EAAsC,EAAtCA,WAAYmB,EAA0B,EAA1BA,qBAClC,OACC,kBAAC,IAAMC,SAAP,KACC,yBAAKL,UAAU,gCACd,2BAAOA,UAAU,mBAAmBM,KAAK,QAAQC,KAAK,cAAcR,GAAG,UAAUS,MAAM,UAAUC,eAA+B,YAAfxB,EAA0ByB,SAAUN,IACrJ,2BAAOJ,UAAU,mBAAmBW,QAAQ,WAA5C,YAED,yBAAKX,UAAU,gCACd,2BAAOA,UAAU,mBAAmBM,KAAK,QAAQC,KAAK,cAAcR,GAAG,aAAaS,MAAM,aAAaC,eAA+B,eAAfxB,EAA6ByB,SAAUN,IAC9J,2BAAOJ,UAAU,mBAAmBW,QAAQ,cAA5C,gB,gBCkDUC,E,2MAtDdC,MAAQ,CACPC,SAAU,GACVC,UAAW,GACX9B,WAAY,W,EAIbmB,qBAAuB,SAACY,GACvB,EAAKC,SAAS,CACbhC,WAAY+B,EAAME,OAAOV,QAAQ,kBAAMW,QAAQC,IAAI,EAAKP,W,EAG1DQ,kBAAoB,WACnB,IAAMC,EAAU,yFAAqFC,IAAUC,YAE/GC,MAAMH,GACJI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEJ,IAAMd,EAAYc,EAAKC,KAAKC,QAAO,SAAA/C,GAAO,OAAIA,EAAQgD,OAAOC,SAAS,eACtE,EAAKhB,SAAS,CACbH,SAAUe,EAAKC,KACff,UAAWA,IAAY,kBAAMI,QAAQC,IAAI,EAAKP,c,EAInDqB,eAAiB,WACb,OAAO,EAAKrB,MAAME,UAAUoB,KAAI,SAACnD,EAASoD,GAAV,OAAoB,kBAAC,EAAD,CAASpD,QAASA,EAASqD,IAAKD,Q,EAGxFE,mBAAqB,WACpB,OAAO,kBAAC,EAAD,O,wEAKP,OACC,yBAAKtC,UAAU,aACd,wBAAIA,UAAU,uBAAd,mBACA,wBAAIA,UAAU,wBAAd,gBACA,6BACEuC,KAAKD,sBAEP,yBAAKtC,UAAU,8BACbuC,KAAKL,uB,GA9CiBM,IAAMC,WCanBC,E,iLATb,OACC,yBAAK1C,UAAU,OACd,kBAAC,EAAD,W,GAJcyC,aCKEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,iB,gBElInBC,EAAOC,QAAU,CAChB,WAAe,mCACf,cAAkB,U","file":"static/js/main.8e9888d5.chunk.js","sourcesContent":["import React from 'react';\n\nvar moment = require('moment');\n\nconst DayCard = ({ reading, degreeType }) => {\n\tlet newDate = new Date();\n\tconst weekday = reading.dt * 1000\n\tnewDate.setTime(weekday)\n\n\tconst fahrenheit = Math.round(reading.main.temp)\n\tconst celsius = Math.round((fahrenheit - 32) * 5/9)\n\n\tconst imgURL = `owf owf-${reading.weather[0].id} owf-5x`\n\n\treturn (\n\t\t<div className=\"col-sm-2\">\n\t\t\t<div className=\"card\">\n\t\t\t\t<h3 className=\"card-title\">{moment(newDate).format('dddd')}</h3>\n\t\t\t\t<p className=\"text-muted\">{moment(newDate).format('MMMM Do, h:mm a')}</p>\n\t\t\t\t<i className={imgURL}></i>\n\t\t\t\t<h2>{degreeType === \"celsius\" ? celsius + \"°C\" : fahrenheit + \"°F\"}</h2>\n\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t<p className=\"card-text\">{reading.weather[0].description}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default DayCard;","import React from 'react';\n\n\tconst DegreeToggle = ({degreeType, updateForecastDegree}) => {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<div className=\"form-check form-check-inline\">\n\t\t\t\t\t<input className=\"form-check-input\"\ttype=\"radio\" name=\"degree-type\"\tid=\"celsius\" value=\"celsius\" defaultChecked={degreeType === \"celsius\"}\tonChange={updateForecastDegree}\t/>\n\t\t\t\t\t<label className=\"form-check-label\" htmlFor=\"celsius\">Celsius</label>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"form-check form-check-inline\">\n\t\t\t\t\t<input className=\"form-check-input\" type=\"radio\" name=\"degree-type\"\tid=\"fahrenheit\" value=\"fahrenheit\" defaultChecked={degreeType === \"fahrenheit\"}\tonChange={updateForecastDegree}\t/>\n\t\t\t\t\t<label className=\"form-check-label\" htmlFor=\"fahrenheit\">Farenheit</label>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t)\n\t}\n\nexport default DegreeToggle;","import React from 'react';\nimport DayCard from './DayCard';\nimport DegreeToggle from './DegreeToggle';\nimport apiConfig from './apiKeys';\n\nclass WeekContainer extends React.Component {\n\t\n\tstate = {\n\t\tfullData: [],\n\t\tdailyData: [],\n\t\tdegreeType: \"celsius\"\n\t}\n\n\t\n\tupdateForecastDegree = (event) => {\n\t\tthis.setState({\n\t\t\tdegreeType: event.target.value}, () => console.log(this.state))\n\t}\n\n\tcomponentDidMount = () => {\n\t\tconst weatherURL = `http://api.openweathermap.org/data/2.5/forecast?zip=11102&units=imperial&APPID=${apiConfig.weatherKey}`\n\n\t\tfetch(weatherURL)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => \n\t\t\t\t{\n\t\t\t\t\tconst dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tfullData: data.list,\n\t\t\t\t\t\tdailyData: dailyData}, () => console.log(this.state))\t\n\t\t\t\t})\n\t}\n\t\n\tformatDayCards = () => {\n    \treturn this.state.dailyData.map((reading, index) => <DayCard reading={reading} key={index} />)\n\t}\n\n\tformatDegreeToggle = () => {\n\t\treturn <DegreeToggle />\t\n\t}\n\n\trender() {\n\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<h1 className=\"display-1 jumbotron\">5-Day Forecast.</h1>\n\t\t\t\t<h5 className=\"display-5 text-muted\">New York, US</h5>\n\t\t\t\t<div>\n\t\t\t\t\t{this.formatDegreeToggle()}\t\n\t\t\t\t</div>\n\t\t\t\t<div className=\"row justify-content-center\">\n\t\t\t\t\t{this.formatDayCards()}\n\t\t\t\t</div>\t\n\t\t\t</div>\n\t\t)\n\t}\n\n\t\n\t\n}\n\nexport default WeekContainer;","import React, {Component} from 'react';\nimport './App.css';\nimport WeekContainer from './WeekContainer';\nimport DayCard from './DayCard';\nimport DegreeToggle from './DegreeToggle';\n\n\nclass App extends Component {\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"App\">\n\t\t\t\t<WeekContainer />\n\t\t\t</div>\t\t\n\t\t);\n\t}\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// Api Keys\nmodule.exports = {\n\t\"weatherKey\" : \"fcd1b6ac5f5d15324dc419ab84adc561\",\n\t\"weatherUserId\" : 2643743\n}\n"],"sourceRoot":""}